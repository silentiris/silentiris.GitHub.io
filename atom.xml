<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://silentiris.github.io</id>
    <title>silentIris</title>
    <updated>2023-10-18T15:06:31.219Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://silentiris.github.io"/>
    <link rel="self" href="https://silentiris.github.io/atom.xml"/>
    <subtitle>分享代码日常</subtitle>
    <logo>https://silentiris.github.io/images/avatar.png</logo>
    <icon>https://silentiris.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, silentIris</rights>
    <entry>
        <title type="html"><![CDATA[10.15 周报]]></title>
        <id>https://silentiris.github.io/post/C4dJJIRWR/</id>
        <link href="https://silentiris.github.io/post/C4dJJIRWR/">
        </link>
        <updated>2023-10-15T05:38:52.000Z</updated>
        <content type="html"><![CDATA[<p>好长时间没写周报了，前一段时间太忙了。其实说到这个，也并没有忙到周报都写不了，感觉主要的问题是效率太低了，容易受到别的事的影响，这是这一段最主要的问题。这一段干了不少事吧，上一次写还是一个多月前。现在发现周报确实是一个很重要的环节，当自己闲下来就想无头苍蝇一样不知道干什么，提前做好规划和定时总结还是很重要的。</p>
<ol>
<li>完善华五项目。这一周主要跟python打交道，或者说整个比赛都在和python打交道，总的来说就是，痛苦。被py的环境各种折磨，各种各样的报错都见过。在这个环节中其实暴露的问题也挺多的，比如在说说中提到的，太浮躁了，急功近利而沉不下来心。没遇到多少事就想放弃了，而且感觉有些惰于思考，总是希望某个路径或者博客一路走下去就好了，当这条路走不通，就不想思考了。这是非常严重的问题。</li>
<li>安排科协相关事项：等着挨骂。总的来说，太欠缺考虑了，比如最后拍照环节，还有投屏，空调等，这些都是问题。还有就是去整体安排和策划的能力太差了，只能做到把任务发下去，但是具体完成的怎么样没法保证。应该需要一种行之有效的监督或者查验机制，保证自己发放下去的任务可以被及时正确完成。还有就是需要保证他们都能知道我要传递的信息，这是一个非常难办到的事，很多人对群里的消息根本就没有留心，对于重要的通知甚至不知道，关于如何提高信息的送达率，确实是一个需要学习的技术，仅仅只靠@全体作用并不大。</li>
</ol>
<p>问题：</p>
<ol>
<li>关于python与机器学习相关的各种环境部署等依然不是很了解。比如torch，cuda，tensorrt，python都各自是干什么，依赖关系是什么样的，怎样去比较快速而稳定的配置程序需要的运行环境等，这些都是还没有一个准确答案的问题。</li>
<li>在学习一个新语言的过程中，比如py或者go，总是很快的学习一下基本语法，或者一些基础特性。但是记忆很不牢靠，应用也很不灵活。对这个语言其实还是有很多地方是不了解的。比如py的global之前可能就不了解或者不是很会使用。我们应该怎样快速入门一个语言而且能保证知识的相对全面呢？昨天跟xhh学长聊了聊感觉有一种解决方案就是去dfs，遇到不会的话就一层一层的向下学习，我觉得这是一种非常好的深入了解某个语言底层的方法。</li>
<li>如何能在管理时调动积极性或是提高通知的送达率，让发出去的通知可以被至少重视和认真阅读呢？</li>
</ol>
<p>下周规划：</p>
<p>感觉可以按照大酱的方式来学一学。主要内容是jvm+juc+go吧。</p>
<ol>
<li>jvm课程看60集。</li>
<li>Juc课程看60集。</li>
<li>go by example跟着教程写完，以及把涉及到的每一个知识点复习一下。</li>
<li>复习数据结构：复习栈的应用。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[maven多模块管理]]></title>
        <id>https://silentiris.github.io/post/CmUMwLjIW/</id>
        <link href="https://silentiris.github.io/post/CmUMwLjIW/">
        </link>
        <updated>2023-10-06T13:58:12.000Z</updated>
        <content type="html"><![CDATA[<h1 id="拆分模块">拆分模块</h1>
<h2 id="模块拆分策略">模块拆分策略：</h2>
<h3 id="按职责划分">按职责划分</h3>
<p>eg:</p>
<ul>
<li>--order
<ul>
<li>--service</li>
<li>--po</li>
<li>--controller</li>
<li>--dao</li>
<li>--common</li>
<li>--util</li>
</ul>
</li>
</ul>
<h3 id="按功能划分">按功能划分</h3>
<ul>
<li>--service
<ul>
<li>--pay</li>
<li>--order</li>
<li>--manage</li>
</ul>
</li>
</ul>
<h1 id="依赖冲突">依赖冲突</h1>
<h2 id="查看依赖冲突">查看依赖冲突</h2>
<ol>
<li>通过<code>mvn -Dverbose dependency:tree</code>来查看。</li>
</ol>
<p>如果有<code>omitted for duplicate</code>表示有jar包被重复依赖，最后写着<code>omitted for conflict with xxx</code>的，说明和别的jar包版本冲突了，而该行的jar包不会被引入。</p>
<ol start="2">
<li>idea可以用maven helper查看</li>
</ol>
<h2 id="解决方式">解决方式</h2>
<ol>
<li>第一声明优先：即在pom.xml文件自上而下，先声明的jar坐标，就先引用该jar的传递依赖。</li>
<li>路径最短者优先：即直接依赖的级别高于依赖传递。可以在最外层来定义某个依赖的版本来统一版本。</li>
<li>排除依赖：如果导入某个包的时候不想要其中的某个依赖，可以用<code>&lt;exclusions&gt;</code>标签。</li>
</ol>
<p>例如：</p>
<pre><code class="language-xml">        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
            &lt;version&gt;5.2.7.RELEASE&lt;/version&gt;
            &lt;exclusions&gt;
                &lt;exclusion&gt;
                    &lt;artifactId&gt;spring-core&lt;/artifactId&gt;
                    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
                &lt;/exclusion&gt;
            &lt;/exclusions&gt;
        &lt;/dependency&gt;
</code></pre>
<p>这段代码即可排除``org.springframewor`这个依赖。</p>
<h1 id="搭建多模块项目">搭建多模块项目</h1>
<h2 id="父模块">父模块</h2>
<p>使用idea初始化父项目，什么依赖都不需要加，仅用于管理。父模块可以仅留下pom和.gitignore。</p>
<p>在父工程的pom文件中可以设置项目相关属性。</p>
<ul>
<li>定义子模块<br>
可以在<code>&lt;modules&gt;</code>属性中定义子模块。<code>&lt;module&gt;</code>中填写子模块的名称</li>
</ul>
<pre><code class="language-xml">&lt;!--父模块--&gt;
&lt;modules&gt;  
    &lt;module&gt;user-service&lt;/module&gt;  
    &lt;module&gt;order-service&lt;/module&gt;  
    &lt;module&gt;eureka-server&lt;/module&gt;  
&lt;/modules&gt;
&lt;!--子模块的parent属性--&gt;
&lt;parent&gt;  
    &lt;groupId&gt;com.sipc&lt;/groupId&gt;  
    &lt;!--子模块名，和上方的module名一样--&gt;
    &lt;artifactId&gt;cloud-learn&lt;/artifactId&gt;  
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;  
&lt;/parent&gt;
</code></pre>
<ul>
<li>更换打包方式</li>
</ul>
<pre><code class="language-xml">&lt;packaging&gt;pom&lt;/packaging&gt;
</code></pre>
<p>pom 是最简单的打包类型。不像jar和war，它生成的构件只有它本身。将 <strong>packaging</strong> 申明为 <strong>pom</strong> 则意味着没有代码需要测试或者编译，也没有资源需要处理。<br>
由于我们使用了聚合，所以打包方式必须为pom，否则无法构建。</p>
<ul>
<li>自定义属性</li>
</ul>
<pre><code class="language-xml">&lt;properties&gt;  
    &lt;spring-cloud.version&gt;2022.0.4&lt;/spring-cloud.version&gt;  
    &lt;spring-cloud-alibaba.version&gt;2022.0.0.0&lt;/spring-cloud-alibaba.version&gt;  
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;  
    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;  
    &lt;java.version&gt;17&lt;/java.version&gt;  
&lt;/properties&gt;
</code></pre>
<p>可以在这里定义一些变量，以便后续的依赖快速修改版本等。后面的依赖可以直接使用<code>&lt;version&gt;${spring-cloud-alibaba.version}&lt;/version&gt;</code>这样的方式来定义依赖版本。</p>
<ul>
<li>定义统一依赖管理dependencyManagement<br>
在Maven中，当父模块定义了<code>&lt;dependencies&gt;</code>元素时，子模块可以直接使用这些依赖项。子模块不需要再次指定版本号，而是可以直接引用父模块中定义的依赖项。当需要变更版本号的时候只需要在父类容器里更新，不需要任何一个子项目的修改；如果某个子项目需要另外一个特殊的版本号时，只需要在自己的模块dependencies中声明一个版本号即可。子类就会使用子类声明的版本号，不继承于父类版本号。</li>
</ul>
<pre><code class="language-xml">&lt;dependencyManagement&gt;  
    &lt;dependencies&gt;        
    &lt;!--阿里巴巴下载仓库--&gt;  
        &lt;dependency&gt;  
            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;  
            &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;  
            &lt;version&gt;${spring-cloud-alibaba.version}&lt;/version&gt;  
            &lt;type&gt;pom&lt;/type&gt;  
            &lt;scope&gt;import&lt;/scope&gt;  
        &lt;/dependency&gt;        
        &lt;!-- springCloud --&gt;  
        &lt;dependency&gt;  
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;  
            &lt;!--是springcloud为了管理依赖所创造的依赖，里面有springcloud的所有依赖--&gt;
            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;  
            &lt;version&gt;${spring-cloud.version}&lt;/version&gt;  
	        &lt;!--pom的意思是仅作为pom引入，不导入实际jar包--&gt;
            &lt;type&gt;pom&lt;/type&gt;  
            &lt;scope&gt;import&lt;/scope&gt;  
        &lt;/dependency&gt;
        &lt;!-- mysql--&gt;    
	    &lt;dependency&gt;
	        &lt;groupId&gt;mysq1&lt;/groupId&gt;
	        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
	        &lt;version&gt;5.1.2&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
&lt;!--子项目中只需要声明groupId喝artifactId--&gt;
</code></pre>
<p>与<code>&lt;dependencies&gt;</code>的区别：</p>
<ol>
<li>Dependencies相对于dependencyManagement，所有生命在dependencies里的依赖都会自动引入，并默认被所有的子项目继承。</li>
<li>dependencyManagement里只是声明依赖，并不自动实现引入，因此子项目需要显示的声明需要用的依赖。如果不在子项目中声明依赖，是不会从父项目中继承下来的；只有在子项目中写了该依赖项，并且没有指定具体版本，才会从父项目中继承该项，并且version和scope都读取自父pom;另外如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。</li>
</ol>
<h2 id="子模块">子模块</h2>
<p>在父模块之下建立一个子模块，需要在pom文件修改属性。</p>
<ul>
<li>定义父模块</li>
</ul>
<pre><code class="language-xml">&lt;parent&gt;  
    &lt;groupId&gt;com.sipc&lt;/groupId&gt;  
    &lt;!--工件Id要和parent一致--&gt;
    &lt;artifactId&gt;cloud-learn&lt;/artifactId&gt;  
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;  
&lt;/parent&gt;
</code></pre>
<ul>
<li>添加该模块需要的依赖<br>
如果在父模块的<code>&lt;dependencyManagement&gt;</code>定义过就不需要写version。</li>
</ul>
<p>ps. 如果想导入其他子模块，需要在 <code>dependency</code> 中引入要依赖的子模块。我们依然应该使用在父模块声明<code>&lt;dependencyManagement&gt;</code>来集中管理版本。在其他子模块只需要导入groupId和artifactId，版本由父项目统一管理。</p>
<p>例如：父工程pom：</p>
<pre><code class="language-xml">            &lt;dependency&gt;
                &lt;groupId&gt;com.sipc&lt;/groupId&gt;
                &lt;artifactId&gt;user-service&lt;/artifactId&gt;
                &lt;version&gt;${order-service.version}&lt;/version&gt;
            &lt;/dependency&gt;
</code></pre>
<p>在user-service的pom引入：</p>
<pre><code class="language-xml">        &lt;dependency&gt;
            &lt;groupId&gt;com.sipc&lt;/groupId&gt;
            &lt;artifactId&gt;order-service&lt;/artifactId&gt;
        &lt;/dependency&gt;
</code></pre>
<p>即可在user-service中使用order-service的暴露给外界的接口。</p>
<p>Referrence：</p>
<p><a href="https://juejin.cn/post/6844904198220283918">maven依赖冲突以及解决方法</a></p>
<p><a href="https://juejin.cn/post/6844903970024980488">maven多模块管理</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[记录一次clash-for-linux的运行错误]]></title>
        <id>https://silentiris.github.io/post/yNLZEJkro/</id>
        <link href="https://silentiris.github.io/post/yNLZEJkro/">
        </link>
        <updated>2023-10-04T16:21:16.000Z</updated>
        <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/wanhebin/clash-for-linux">clash-for-linux</a></p>
<ol>
<li>
<p>首先是<code>sh start.sh</code>可能会启动不成功。在有些os中<code>/bin/sh</code>被更改为了dash。<br>
可以用<code>bash start.sh</code></p>
</li>
<li>
<p>在我运行时候提示运行成功，但是<code>lsof -i:7890</code>发现没有开启服务，<code>curl google.com</code>也无法连接。<br>
<img src="https://silentiris.github.io/post-images/1.png" alt="Pasted image 20231005000833" loading="lazy"></p>
</li>
<li>
<p>还试了chmod -x ，但是也没有解决，还尝试了很多方法，都没有作用，唯独忽略了去看日志，这是一个非常不好的习惯和错误。遇到了问题应该第一时间看日志的。</p>
</li>
</ol>
<p>​	后来去./logs找到了日志，cat之后</p>
<p><img src="https://silentiris.github.io/post-images/2.png" alt="Pasted image 20231005001608" loading="lazy"><br>
发现<img src="https://silentiris.github.io/post-images/3.png" alt="Pasted image 20231005001704" loading="lazy"></p>
<p>提示找不到这个bin....</p>
<p>后来cd到了bin目录，发现名字真的有问题....晕<br>
<img src="https://silentiris.github.io/post-images/4.png" alt="Pasted image 20231005001754" loading="lazy"><br>
<code>mv clash-linux-amd64-v1.13.0 clash-linux-amd64</code>后，再启动就好了。</p>
<p>第二个问题困扰了我很长时间，没想到最后用这种方式解决了。。。这给我两个启示</p>
<ol>
<li>出现问题一定要记得看日志！！！</li>
<li>在自己编写接口和服务时一定要注意给予正确的反馈，不能像这种明明都没有启动还提示启动成功的。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[leetcode [6] N 字形变换]]></title>
        <id>https://silentiris.github.io/post/PiUA5PSmk/</id>
        <link href="https://silentiris.github.io/post/PiUA5PSmk/">
        </link>
        <updated>2023-09-04T12:50:18.000Z</updated>
        <content type="html"><![CDATA[<h1 id="question">question</h1>
<p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p>
<p>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p>
<p><strong>示例 1：</strong></p>
<pre><code>输入：s = &quot;babad&quot;
输出：&quot;bab&quot;
解释：&quot;aba&quot; 同样是符合题意的答案。
</code></pre>
<p><strong>示例 2：</strong></p>
<pre><code>输入：s = &quot;cbbd&quot;
输出：&quot;bb&quot;
</code></pre>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 1000</code></li>
<li><code>s</code> 仅由数字和英文字母组成</li>
</ul>
<h1 id="my-solution">my solution</h1>
<pre><code class="language-cpp">class Solution
{
public:
    string convert(string s, int numRows)
    {
        if(numRows == 1) return s;
        int cols = (s.size() / (2 * numRows - 2) + 1) * (numRows - 1) ;
        int curRow = 0;
        int curCol = 0;
        vector&lt;vector&lt;char&gt;&gt; res(numRows, vector&lt;char&gt;(cols, '\0'));
        int i = 0;
        bool flag = false;
        while (true)
        {
            while (curRow &lt; numRows -1)
            {
                if (i == s.size())
                {
                    flag = true;
                    break;
                }
                res[curRow][curCol] = s[i];
                curRow++;
                i++;
            }
            while (curRow &gt; 0)
            {
                if (i == s.size())
                {
                    flag = true;
                    break;
                }
                res[curRow][curCol] = s[i];
                curCol++;
                curRow--;
                i++;
            }
            if (flag)
                break;
        }
        string resStr = &quot;&quot;;
        for (int row = 0; row &lt; numRows; row++)
        {
            for (int col = 0; col &lt; cols; col++)
            {
                if (res[row][col] != '\0')
                    resStr = resStr + res[row][col];
            }
        }
        return resStr;
    }
};
</code></pre>
<h1 id="复盘">复盘</h1>
<p>这里的思路是先造一个大数组，然后按照顺序插入，最后遍历。最后遍历的耗时有点长，时间复杂度应该主要来源于此。</p>
<p>后续更优的算法其实心里大概有思路，可惜不知道怎么实现。还是经验不够吧。</p>
<p>可以优化的地方</p>
<ol>
<li>
<pre><code class="language-c++"> int t = r * 2 - 2;
 int c = (n + t - 1) / t * (r - 1);

 利用 i % t &lt; r - 1 来判断状态，更加简洁统一。
</code></pre>
</li>
</ol>
<h2 id="其他思路">其他思路</h2>
<h3 id="压缩矩阵空间">压缩矩阵空间</h3>
<p>my solution中的矩阵有大量的空间没有被使用，可以优化。</p>
<p>注意到每次往矩阵的某一行添加字符时，都会添加到该行上一个字符的右侧，且最后组成答案时只会用到每行的非空字符。因此我们可以将矩阵的每行初始化为一个空列表，每次向某一行添加字符时，添加到该行的列表末尾即可。</p>
<pre><code class="language-c++">class Solution {
public:
    string convert(string s, int numRows) {
        int n = s.length(), r = numRows;
        if (r == 1 || r &gt;= n) {
            return s;
        }
        vector&lt;string&gt; mat(r);
        for (int i = 0, x = 0, t = r * 2 - 2; i &lt; n; ++i) {
            mat[x] += s[i];
            i % t &lt; r - 1 ? ++x : --x;
        }
        string ans;
        for (auto &amp;row : mat) {
            ans += row;
        }
        return ans;
    }
};
链接：https://leetcode.cn/problems/zigzag-conversion/solutions/1298127/z-zi-xing-bian-huan-by-leetcode-solution-4n3u/
</code></pre>
<h3 id="直接构造">直接构造</h3>
<figure data-type="image" tabindex="1"><img src="https://silentiris.github.io/post-images/image-20230904204953587.png" alt="image-20230904204953587" loading="lazy"></figure>
<pre><code class="language-c++">class Solution {
public:
    string convert(string s, int numRows) {
        int n = s.length(), r = numRows;
        if (r == 1 || r &gt;= n) {
            return s;
        }
        string ans;
        int t = r * 2 - 2;
        for (int i = 0; i &lt; r; ++i) { // 枚举矩阵的行
            for (int j = 0; j + i &lt; n; j += t) { // 枚举每个周期的起始下标
                ans += s[j + i]; // 当前周期的第一个字符
                if (0 &lt; i &amp;&amp; i &lt; r - 1 &amp;&amp; j + t - i &lt; n) {
                    ans += s[j + t - i]; // 当前周期的第二个字符
                }
            }
        }
        return ans;
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[leetcode [5] 最长回文子串]]></title>
        <id>https://silentiris.github.io/post/dWISQCv_S/</id>
        <link href="https://silentiris.github.io/post/dWISQCv_S/">
        </link>
        <updated>2023-09-04T12:23:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="question">question</h1>
<p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p>
<p>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p>
<p><strong>示例 1：</strong></p>
<pre><code>输入：s = &quot;babad&quot;
输出：&quot;bab&quot;
解释：&quot;aba&quot; 同样是符合题意的答案。
</code></pre>
<p><strong>示例 2：</strong></p>
<pre><code>输入：s = &quot;cbbd&quot;
输出：&quot;bb&quot;
</code></pre>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 1000</code></li>
<li><code>s</code> 仅由数字和英文字母组成</li>
</ul>
<h1 id="my-solution">my solution</h1>
<pre><code class="language-c++">class Solution
{
public:
    string longestPalindrome(string s)
    {
        pair&lt;int, int&gt; res(0, 0);
        for (int i = 0; i &lt; s.size(); i++)
        {
            for (int j = s.size() - 1; j &gt;= i; j--)
            {
                bool flag = false;
                if (s[j] == s[i])
                {
                    int lpos = i, rpos = j;
                    int len = 0;
                    while (lpos &lt; rpos)
                    {
                        if (s[lpos] != s[rpos])
                            break;
                        lpos++;
                        rpos--;
                        len++;
                    }
                    if (lpos == rpos &amp;&amp; 2 * len + 1 &gt; res.first)
                    {
                        res.first = 2 * len + 1;
                        res.second = i;
                        flag = true;
                    }
                    else if (2 * len &gt; res.first &amp;&amp; lpos &gt;= rpos)
                    {
                        res.first = 2 * len;
                        res.second = i;
                        flag = true;
                    }
                }
                if (flag)
                    break;
            }
        }
        string resStr = s.substr(res.second, res.first);
        return resStr;
    }
};
</code></pre>
<h1 id="复盘">复盘</h1>
<p>思路：</p>
<p>算是暴力，对于每一个字符，找他后面的和他相同的字符，再依此判断是不是回文，但居然没tle，可能卡到了某些奇怪的时间，但是算法也很烂了。时间复杂度极高，而且中间有各种小问题，对于某些边界条件等不是很清楚。</p>
<h2 id="更优解法">更优解法</h2>
<h2 id="动态规划">动态规划</h2>
<pre><code class="language-java">class Solution {
    public String longestPalindrome(String s) {
        int n = s.length();
        String res = &quot;&quot;;
        boolean[][] dp = new boolean[n][n];
        for (int i = n - 1; i &gt;= 0; i--) {
            for (int j = i; j &lt; n; j++) {
                dp[i][j] = s.charAt(i) == s.charAt(j) &amp;&amp; (j - i &lt; 2 || dp[i + 1][j - 1]);
                if (dp[i][j] &amp;&amp;  j - i + 1 &gt; res.length()) {
                    res = s.substring(i, j + 1);
                }
            }
        }
        return res;
    }
}

</code></pre>
<figure data-type="image" tabindex="1"><img src="https://silentiris.github.io/post-images/image-20230904202003536.png" alt="image-20230904202003536" loading="lazy"></figure>
<h2 id="中心扩散">中心扩散</h2>
<p>我们知道回文串一定是对称的，所以我们可以每次循环选择一个中心，进行左右扩展，判断左右字符是否相等即可。</p>
<p>由于存在奇数的字符串和偶数的字符串，所以我们需要从一个字符开始扩展，或者从两个字符之间开始扩展，所以总共有 n+n-1 个中心。</p>
<pre><code class="language-java">public String longestPalindrome(String s) {
    if (s == null || s.length() &lt; 1) return &quot;&quot;;
    int start = 0, end = 0;
    for (int i = 0; i &lt; s.length(); i++) {
        int len1 = expandAroundCenter(s, i, i);
        int len2 = expandAroundCenter(s, i, i + 1);
        int len = Math.max(len1, len2);
        if (len &gt; end - start) {
            start = i - (len - 1) / 2;
            end = i + len / 2;
        }
    }
    return s.substring(start, end + 1);
}

private int expandAroundCenter(String s, int left, int right) {
    int L = left, R = right;
    while (L &gt;= 0 &amp;&amp; R &lt; s.length() &amp;&amp; s.charAt(L) == s.charAt(R)) {
        L--;
        R++;
    }
    return R - L - 1;
}
</code></pre>
<p>这里值得注意的是用一个方法统一了奇数偶数两种情乱。</p>
<h2 id="manachers-algorithm-on">Manacher's Algorithm （O(n)）</h2>
<p>不会</p>
<p>链接：https://leetcode.cn/problems/longest-palindromic-substring/solutions/9001/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-bao-gu/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[9.3 周报]]></title>
        <id>https://silentiris.github.io/post/dKkjiAPLa/</id>
        <link href="https://silentiris.github.io/post/dKkjiAPLa/">
        </link>
        <updated>2023-09-04T01:54:52.000Z</updated>
        <content type="html"><![CDATA[<p>上一周还是比较充实的，果然在115效率还是高很多。上一星期学的比较多也比较杂。现在用ms的todo list，给每天做规划，感觉还是不错的。</p>
<ol>
<li>复习了sping cloud。第一次学的时候基本就是过了一下，看了一眼视频，理解的非常浅。这一遍又实现了小demo，折腾了一下环境配置，还有maven一些高级点的配置，对多模块有一些大致了解。下一个项目感觉可以做多模块了。果然还是写demo才能稍微熟悉一些。顺便还发现之前idea那个逆天的yaml识别不出来配置文件的bug。</li>
<li>每天一道力扣。算法慢慢学一点把，顺便也复建一下，不要太拉了。做力扣的时候会先自己做，ac之后复盘，找更好的的做法和题解，记录博客更新。不过有些题还是太难惹5555。</li>
<li>看数据结构。看到70，该看b树了。值得注意的是这个也就是整体过一遍了。以后肯定还是要代码巩固的，比如刷题的时候发现对基本数据结构还是太不熟悉了，甚至写个链表都要写半天。</li>
<li>看acwing的课。规划每周两节把，上周看了stl的和快排和二分。说实话，感觉理解的程度也不是很高，属于看过就忘。可能还是没完全听明白或者是没做题巩固吧。上一周做leetcode [4]的时候就看那个二分半天没明白。</li>
<li>复习maven。对于maven的稍微进阶的用法更了解一点。比如依赖冲突，多模块项目等。第一次学的时候只是过了一下，发现根本就不会用。现在的了解稍微多一点了。</li>
<li>每晚跑步。</li>
<li>处理科协的事，主要是宣传类的还有回答考题。</li>
</ol>
<p>问题：</p>
<ol>
<li>对于有时候自己明白某个算法实现原理，但是自己写的时候问题很多，比如写第四题的双指针的时候很蠢，各种问题接踵而至，感觉很混乱，哪里出问题补哪里，对于算法或者程序整体的问题不是很明晰，不知道怎样改善。</li>
<li>对于很多技术栈感觉只能说是看了看视频，知道整体情况下最多的一种用法，但是还有很多细节是不知道的，感觉自己看文档或者博客学习的能力有点低了。</li>
</ol>
<p>下周规划：</p>
<ol>
<li>数据结构往后10集。</li>
<li>数据结构题集写完线性表。</li>
<li>对于后端的技术栈学的不是很透的继续熟悉，具体的见每日任务吧。想到什么添加到task中，及时学习。</li>
<li>每天一道力扣。</li>
<li>每晚跑步。</li>
<li>开始搞华五的项目。</li>
<li>继续复习一些java基础。</li>
<li>科协纳新事项</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[leetcode [4] 寻找两个正序数组的中位数]]></title>
        <id>https://silentiris.github.io/post/rN_Hzfto7/</id>
        <link href="https://silentiris.github.io/post/rN_Hzfto7/">
        </link>
        <updated>2023-09-03T07:29:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="question">question</h1>
<p>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>。请你找出并返回这两个正序数组的 <strong>中位数</strong> 。</p>
<p>算法的时间复杂度应该为 <code>O(log (m+n))</code> 。</p>
<p><strong>示例 1：</strong></p>
<pre><code>输入：nums1 = [1,3], nums2 = [2]
输出：2.00000
解释：合并数组 = [1,2,3] ，中位数 2
</code></pre>
<p><strong>示例 2：</strong></p>
<pre><code>输入：nums1 = [1,2], nums2 = [3,4]
输出：2.50000
解释：合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5
</code></pre>
<p><strong>提示：</strong></p>
<ul>
<li><code>nums1.length == m</code></li>
<li><code>nums2.length == n</code></li>
<li><code>0 &lt;= m &lt;= 1000</code></li>
<li><code>0 &lt;= n &lt;= 1000</code></li>
<li><code>1 &lt;= m + n &lt;= 2000</code></li>
<li><code>-106 &lt;= nums1[i], nums2[i] &lt;= 106</code></li>
</ul>
<p>标签：</p>
<p>数组，二分查找，分支</p>
<h1 id="my-solution">my solution</h1>
<pre><code class="language-c++">class Solution {
public:
    double findMedianSortedArrays(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {
        vector&lt;int&gt; resVec ;
        resVec.insert(resVec.end(),nums1.begin(),nums1.end());
        resVec.insert(resVec.end(),nums2.begin(),nums2.end());
        sort(resVec.begin(),resVec.end());
        int size = resVec.size();
        if(size%2 == 0){
            return (resVec[size/2-1] + resVec[size/2 ])/(double)2;
        }else{
            return resVec[size/2];
        }
    }
};
</code></pre>
<h1 id="复盘">复盘</h1>
<p>蠢。没仔细看题，直接用最暴力的方式加起来sort，直接O(nlogn)，虽然ac，但是其实还是没想出来log(m+n)的算法。甚至连双指针这种还稍微好一点的算法都没想到。太不认真了，思维应该再缜密一点。</p>
<h3 id="要改进的地方">要改进的地方</h3>
<ol>
<li>好好看题</li>
<li>对于常见算法的时间复杂度不是很清晰</li>
<li>思维过于直接，没有思考性能更优秀的算法</li>
</ol>
<h3 id="更好的处理方式">更好的处理方式</h3>
<h4 id="1暴力归并">1.暴力（归并）</h4>
<p>处理逻辑：</p>
<p>合并 nums1，nums2 为第三个数组<br>
排序第三个数组<br>
按下标，找出中位数<br>
因为 nums1 ，nums2 本身就是按从小到大排序好了的； 使用归并，一个一个的从 nums1 ，nums2 里面取出最小的数，放到第三个数组中。</p>
<pre><code class="language-go">func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {
	res := make([]int, 0)
	i, j := 0, 0
	if len(nums1)*len(nums2) == 0 {
		res = append(res, nums1...)
		res = append(res, nums2...)
	} else {
		for i &lt; len(nums1) || j &lt; len(nums2) {
			if nums1[i] &gt; nums2[j] {
				res = append(res, nums2[j])
				if j == len(nums2)-1 {
					res = append(res, nums1[i:]...)
					break
				}
				j += 1
			} else {
				res = append(res, nums1[i])
				if i == len(nums1)-1 {
					res = append(res, nums2[j:]...)
					break
				}
				i += 1
			}
		}
	}
	totalLen := len(nums1) + len(nums2)
	if totalLen%2 == 0 {
		return float64((res[totalLen/2-1] + res[totalLen/2])) / 2.0
	} else {
		return float64(res[totalLen/2])
	}
}
</code></pre>
<h4 id="2双指针">2.双指针</h4>
<p>处理逻辑：</p>
<p>申请2个指针，分别指向2个数组的头<br>
每次比较大小来移动 2个指针<br>
当指针移动的次数与 (m + n) / 2 相同时，得到中位数<br>
注意边界问题：</p>
<pre><code>2个指针在移动时，是否有超过2个数组的最大个数；
如果有，后续就只能移动另一个指针
</code></pre>
<pre><code class="language-go">func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {
	i, j := 0, 0
	mov := 0
	totalLen := len(nums1) + len(nums2)
	if len(nums1)*len(nums2) == 0 {
		if len(nums1) == 0 {
			if len(nums2)%2 == 0 {
				return float64(nums2[len(nums2)/2]+nums2[len(nums2)/2-1]) / 2.0
			} else {
				return float64(nums2[len(nums2)/2])
			}
		} else {
			return findMedianSortedArrays(nums2, nums1)
		}
	} else {
		for mov &lt; totalLen/2 {
			if i != len(nums1) &amp;&amp; j != len(nums2) {
				if nums1[i] &lt; nums2[j] {
					i += 1
					mov += 1
				} else {
					j += 1
					mov += 1
				}
			} else {
				if i == len(nums1) {
					j += 1
					mov += 1
				} else {
					i += 1
					mov += 1
				}
			}
		}
	}
	if totalLen%2 == 0 {
		var lmax int
		if i == 0 {
			lmax = nums2[j-1]
		} else if j == 0 {
			lmax = nums1[i-1]
		} else {
			lmax = getMax(nums1[i-1], nums2[j-1])
		}
		var rmin int
		if i == len(nums1) || j == len(nums2) {
			if i == len(nums1) {
				rmin = nums2[j]
			} else {
				rmin = nums1[i]
			}
		} else {
			rmin = getMin(nums1[i], nums2[j])
		}
		return float64(rmin+lmax) / 2.0
	} else {
		if i == len(nums1) {
			return float64(nums2[j])
		} else if j == len(nums2) {
			return float64(nums1[i])
		} else {
			return float64(getMin(nums1[i], nums2[j]))
		}
	}
}
func getMax(x, y int) int {
	if x &gt; y {
		return x
	} else {
		return y
	}
}
func getMin(x, y int) int {
	if x &gt; y {
		return y
	} else {
		return x
	}
}
</code></pre>
<h4 id="3-二分查找最优算法logmn">3. 二分查找（最优算法，log(m+n)）</h4>
<h3 id="不会-放弃了">不会 放弃了</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[leetcode [3] 无重复字符的最长子串]]></title>
        <id>https://silentiris.github.io/post/bqJESDfVa/</id>
        <link href="https://silentiris.github.io/post/bqJESDfVa/">
        </link>
        <updated>2023-09-02T01:58:25.000Z</updated>
        <content type="html"><![CDATA[<h1 id="question">question</h1>
<p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>
<p><strong>示例 1:</strong></p>
<pre><code>输入: s = &quot;abcabcbb&quot;
输出: 3 
解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。
</code></pre>
<p><strong>示例 2:</strong></p>
<pre><code>输入: s = &quot;bbbbb&quot;
输出: 1
解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。
</code></pre>
<p><strong>示例 3:</strong></p>
<pre><code>输入: s = &quot;pwwkew&quot;
输出: 3
解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。
</code></pre>
<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= s.length &lt;= 5 * 104</code></li>
<li><code>s</code> 由英文字母、数字、符号和空格组成</li>
</ul>
<p>相关标签：</p>
<p>哈希表，字符串，滑动窗口</p>
<h1 id="my-solution">my solution</h1>
<pre><code class="language-go">func lengthOfLongestSubstring(s string) int {
	resSlice := make([]int, 0)
	for i := 0; i &lt; len(s)-1; i++ {
		m := make(map[rune]int)
		m[rune(s[i])] = 1
		resSlice = append(resSlice,1)
		j := i + 1
		for m[rune(s[j])] == 0 {
			m[rune(s[j])] = 1
			resSlice[i] += 1
			if j==len(s) - 1 {
				break
			}
			j += 1
		}
	}
	res := 1;
	for _,value := range resSlice {
		if value &gt; res {
			res = value
		}
	}
	if s==&quot;&quot;{
		res = 0
	}
	return res
}
</code></pre>
<h1 id="复盘">复盘</h1>
<p>这个题的解决方式很蠢，直接暴力遍历每个数，不过在遍历的时候用到了map（或者这里的作用和set是一样的），下一个数map中没有的话就+1，有的话就结束for下一个。好在题目数据量不大，还勉强能过。通过这道题了解了一下滑动窗口算法。顺便发现go的基础太差了，比如rune，map构造，map里的类型转换(<code>m[rune(s[j])]</code>)等，for循环等，还要复习一下基础。还有对&quot;&quot;的特判意识不够，考虑不是很全面。</p>
<h2 id="问题">问题：</h2>
<ol>
<li>了解贪心和滑动窗口</li>
<li>go基础。（循环，切片，map，数据类型等）</li>
</ol>
<h2 id="更好的处理方式">更好的处理方式</h2>
<h3 id="滑动窗口">滑动窗口：</h3>
<p>leetcode官方：</p>
<p>如果我们依次递增地枚举子串的起始位置，那么子串的结束位置也是递增的！这里的原因在于，假设我们选择字符串中的第k 个字符作为起始位置，并且得到了不包含重复字符的最长子串的结束位置为 rk。那么当我们选择第 k+1个字符作为起始位置时，首先从 k+1到 rk的字符显然是不重复的，并且由于少了原本的第k个字符，我们可以尝试继续增大 rk ，直到右侧出现了重复字符为止。</p>
<p>这样一来，我们就可以使用「滑动窗口」来解决这个问题了：</p>
<ul>
<li>
<p>我们使用两个指针表示字符串中的某个子串（或窗口）的左右边界，其中左指针代表着上文中「枚举子串的起始位置」，而右指针即为上文中的rk;</p>
</li>
<li>
<p>在每一步的操作中，我们会将左指针向右移动一格，表示 我们开始枚举下一个字符作为起始位置，然后我们可以不断地向右移动右指针，但需要保证这两个指针对应的子串中没有重复的字符。在移动结束后，这个子串就对应着 以左指针开始的，不包含重复字符的最长子串。我们记录下这个子串的长度；</p>
</li>
<li>
<p>在枚举结束后，我们找到的最长的子串的长度即为答案。</p>
</li>
</ul>
<pre><code class="language-go">func lengthOfLongestSubstring(s string) int {
    // 哈希集合，记录每个字符是否出现过
    m := map[byte]int{}
    n := len(s)
    // 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动
    rk, ans := -1, 0
    for i := 0; i &lt; n; i++ {
        if i != 0 {
            // 左指针向右移动一格，移除一个字符
            delete(m, s[i-1])
        }
        for rk + 1 &lt; n &amp;&amp; m[s[rk+1]] == 0 {
            // 不断地移动右指针
            m[s[rk+1]]++
            rk++
        }
        // 第 i 到 rk 个字符是一个极长的无重复字符子串
        ans = max(ans, rk - i + 1)
    }
    return ans
}

func max(x, y int) int {
    if x &lt; y {
        return y
    }
    return x
}
</code></pre>
<h4 id="判断重复字符">判断重复字符：</h4>
<p>上面的流程使用哈希集合。也可以使用数组(用ascii码来记录字符)来判断是否有重复字符。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[leetcode [2] 两数相加]]></title>
        <id>https://silentiris.github.io/post/6Isj6BIHr/</id>
        <link href="https://silentiris.github.io/post/6Isj6BIHr/">
        </link>
        <updated>2023-09-02T01:06:41.000Z</updated>
        <content type="html"><![CDATA[<h1 id="question">question:</h1>
<p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p>
<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>
<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<p><strong>示例 1：</strong></p>
<figure data-type="image" tabindex="1"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg" alt="img" loading="lazy"></figure>
<pre><code>输入：l1 = [2,4,3], l2 = [5,6,4]
输出：[7,0,8]
解释：342 + 465 = 807.
</code></pre>
<p><strong>示例 2：</strong></p>
<pre><code>输入：l1 = [0], l2 = [0]
输出：[0]
</code></pre>
<p><strong>示例 3：</strong></p>
<pre><code>输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
输出：[8,9,9,9,0,0,0,1]
</code></pre>
<p><strong>提示：</strong></p>
<ul>
<li>每个链表中的节点数在范围 <code>[1, 100]</code> 内</li>
<li><code>0 &lt;= Node.val &lt;= 9</code></li>
<li>题目数据保证列表表示的数字不含前导零</li>
</ul>
<p>相关标签：<br>
递归，链表，数学</p>
<h1 id="my-solution">my solution:</h1>
<pre><code class="language-c++">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution
{
public:
    ListNode *addTwoNumbers(ListNode *l1, ListNode *l2)
    {
        int len1 = 1;
        int len2 = 1;
        ListNode *temp = l1;
        while (temp-&gt;next != nullptr)
        {
            temp = temp-&gt;next;
            len1++;
        }
        temp = l2;
        while (temp-&gt;next != nullptr)
        {
            temp = temp-&gt;next;
            len2++;
        }
        if (len1 &gt;= len2)
        {
            ListNode *resNode = l1;
            for (int i = 0; i &lt; len1; i++)
            {
                l1-&gt;val = l1-&gt;val + l2-&gt;val;
                if (l1-&gt;val &gt;= 10 &amp;&amp; i != len1 - 1)
                {
                    l1-&gt;next-&gt;val++;
                    l1-&gt;val -= 10;
                }
                else if (l1-&gt;val &gt;= 10 &amp;&amp; i == len1 - 1)
                {
                    l1-&gt;val -= 10;
                    ListNode *lastNode = new ListNode(1, nullptr);
                    l1-&gt;next = lastNode;
                }
                if (i != len1 - 1)
                {
                    l1 = l1-&gt;next;
                    if (l2-&gt;next != nullptr)
                        l2 = l2-&gt;next;
                    else
                        l2-&gt;val = 0;
                }
            }
            return resNode;
        }
        else
        {
            ListNode *resNode = l2;
            for (int i = 0; i &lt; len2; i++)
            {
                l2-&gt;val = l1-&gt;val + l2-&gt;val;
                if (l2-&gt;val &gt;= 10 &amp;&amp; i != len2 - 1)
                {
                    l2-&gt;next-&gt;val++;
                    l2-&gt;val -= 10;
                }
                else if (l2-&gt;val &gt;= 10 &amp;&amp; i == len2 - 1)
                {
                    l2-&gt;val -= 10;
                    ListNode *lastNode = new ListNode(1, nullptr);
                    l2-&gt;next = lastNode;
                }
                if (i != len2 - 1)
                {
                    l2 = l2-&gt;next;
                    if (l1-&gt;next != nullptr)
                        l1 = l1-&gt;next;
                    else
                        l1-&gt;val = 0;
                }
            }
            return resNode;
        }
    }
};
</code></pre>
<h1 id="复盘">复盘：</h1>
<p>这道题刚开始写的时候犯了很严重的问题，题目的数据范围都没有看清楚， 导致从开始的思路就是错的，最开始想两数相加然后再逆序构造链表，在写的过程中还发现我对于构造链表和一些基础内容比如求整数的某位数字等还不熟练，问题很大。后来发现不对，开始思考另一种方式。想到绕过链表的构造，直接用现成的链表，这种方法有一定的效果，并且最终做了出来。但是在对于l1,l2 长度的问题处理上依然不够优雅。</p>
<p>可以优化的地方：else后面的第二种情况可以直接写成<code>return addTwoNumbers(l2,l1);</code></p>
<h2 id="值得关注的问题">值得关注的问题：</h2>
<ol>
<li>链表的构造</li>
<li>c++，go的基础语法</li>
<li>快速求数字的位数和某位的数字</li>
<li>对于多情况下的处理</li>
</ol>
<h2 id="更好的处理方式">更好的处理方式：</h2>
<h3 id="1-模拟">1. 模拟</h3>
<pre><code class="language-c++">class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* dummy = new ListNode();
        int carry = 0;
        ListNode* cur = dummy;
        while (l1 || l2 || carry) {
            int s = (l1 ? l1-&gt;val : 0) + (l2 ? l2-&gt;val : 0) + carry;
            carry = s / 10;
            cur-&gt;next = new ListNode(s % 10);
            cur = cur-&gt;next;
            l1 = l1 ? l1-&gt;next : nullptr;
            l2 = l2 ? l2-&gt;next : nullptr;
        }
        return dummy-&gt;next;
    }
};
链接：https://leetcode.cn/problems/add-two-numbers/solutions/2327028/python3javacgo-yi-ti-yi-jie-mo-ni-jian-j-qdpm/
</code></pre>
<ol>
<li>判断直接用<code>while (l1 || l2 || carry)</code>来判断，条件清晰，使用carry来保存是否进位，比我的直接加的方法更好，注意辅助变量的使用。</li>
<li><code>l1 ? l1-&gt;val : 0</code>等，注意<code>nullptr</code>也可以表示false。</li>
<li>使用dummy来表示第一个链表之前的链表，让逻辑更统一而无需特判。</li>
<li>直接用新链表存储，避免了链表长度相关的影响。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[8.27 周报]]></title>
        <id>https://silentiris.github.io/post/nYAc4azQW/</id>
        <link href="https://silentiris.github.io/post/nYAc4azQW/">
        </link>
        <updated>2023-08-29T00:33:05.000Z</updated>
        <content type="html"><![CDATA[<p>上一周主要是考科二，准备回学校，写了下迎新小游戏。还放松（白兰）了几天。到学校要好好学习了。</p>
<ol>
<li>科二和六级通过：六级能通过还是比较出乎意料的，本来按照考完对的答案来看似乎已经没救了，其实也差不多，这个听力真的太差了，要不是阅读的分数还好，早就不合格了。不过值得庆幸的是，缺点还是比较明确的，以后可以在这方面上多加训练。也要全民的背单词等，否则分数和水平还是不能再往上提高一个档次。这两个考试给我的最大的感受就是不要半场开香槟，永远不要骄傲自满，自己在大多数时候做的还远远不够。</li>
<li>写迎新小游戏。小游戏的基本框架搭起来太方便了，基本的组件只需要cv就可以了。业务的逻辑也还是挺简单的。不过时间好像也没有那么紧，下次还是做得再尽量完美一点。这给我的启示是代码还是要多打多写，写的多了很多技术就能理解的更加好了。还有就是对nginx还不是很了解，导致设计api的时候名字并不是很合理，最后部署的时候还需要根据每个接口的名字来特判，以后写的时候需要注意api的命名规范。</li>
</ol>
<p>问题：</p>
<ol>
<li>暴露给外部的供公共调用的api和仅限项目中前端调用的api需要区别吗？api包是否就是仅储存前者的。</li>
</ol>
<p>下周规划：</p>
<ol>
<li>数据结构学习：学到70把，但是要敲一敲代码了，还有笔记也要整理一下。</li>
<li>微服务学习：把黑马的工程从头到尾再复习一遍。至es。把各技术栈写一个demo练练手。</li>
<li>计算机网络学习：20集。</li>
<li>go学习：再复习一下gorm和gin。</li>
</ol>
]]></content>
    </entry>
</feed>